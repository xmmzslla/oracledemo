/*
서브쿼리
1. 스칼라 쿼리 : SELECT
2. 인라인 뷰: FROM
3. 서브쿼리 : WHERE
*/

--90번 부서에 근무하는 Lex 사원의 근무부서명을 출력하시오.
SELECT department_name
FROM departments
WHERE department_id = 90;

--'Lex'가 근무하는 부서명을 출력하시오
SELECT department_id
FROM employees
WHERE first_name = 'Lex';

SELECT department_name
FROM departments
WHERE department_id = 90;

SELECT d.department_name
FROM employees e, departments d
WHERE e.department_id = d.department_id
AND e.first_name = 'Lex';

SELECT department_name
FROM departments
WHERE department_id = (
                                          SELECT department_id
                                          FROM employees
                                          WHERE first_name = 'Lex'
                                           );
--'Lex'와 동일한 업무(job_id)를 가진 사원의 이름(first_name),
--업무명(job_title), 입사일(hire_date)을 출력하시오
SELECT first_name, job_title, hire_date
FROM employees e, jobs j
WHERE e.job_id = j.job_id
AND e.job_id = (
                          SELECT job_id
                          FROM employees
                          WHERE first_name = 'Lex'
                        );

--'IT'에 근무하는 사원이름(first_name), 부서번호를 출력하세요.
SELECT first_name, department_id
FROM employees
WHERE department_id = (
                                          SELECT department_id
                                          FROM departments
                                          WHERE department_name = 'IT'
                                            ); --5명
                                    
--'Bruce'보다 급여를 많이 받은 사원이름(first_name), 부서명, 급여를 출력하시오.***
SELECT department_name, salary
FROM employees e, departments d
WHERE department_id 
AND e.salary > (
                                          SELECT salary
                                          FROM employees
                                          WHERE first_name 'Bruce'
                                            )
ORDER BY e.salary;

--부서별로 가장 급여를 많이 받는 사원이름, 부서번호, 급여를 출력하시오.(in)
SELECT e.first_name, e.department_id, e.salary
FROM employees e
WHERE (e.department_id, e.salary) IN (
                                 SELECT department_id, max(salary)
                                 FROM employees
                                 GROUP BY department_id
                                 )
ORDER BY department_id;

--30부서의 모든 사원들의 급여보다 더 많은 급여를 받는
--사원이름, 급여, 입사일을 출력하시오.(ALL)
--(서브쿼리에서 max()함수를 사용하지 않는다.);
SELECT first_name, salary, hire_date
FROM employees
WHERE salary > ALL(
                                 SELECT salary
                                 FROM employees
                                 WHERE department_id = 30
                                 );
                         
--30부서의 모든 사원들의 급여보다 더 높은 급여를 받는
--사원이름, 급여, 입사일을 출력하시오.(ANY)
--(서브쿼리에서 min()함수를 사용하지 않는다.);   
SELECT first_name, salary, hire_date
FROM employees
WHERE salary > ANY ( --2500보다 큰값
                                 SELECT salary
                                 FROM employees
                                 WHERE department_id = 30
                                 );

--사원이있는 부서만 출력하시오
SELECT count(*)
FROM departments; --27개

SELECT department_id, department_name
FROM departments
WHERE department_id IN (
                                            SELECT distinct department_id
                                            FROM employees
                                            WHERE department_id IS NOT NULL
                                            );
                                            
 SELECT department_id, department_name
FROM departments d
WHERE EXISTS( 
                          SELECT 1
                          FROM employees e
                          WHERE e.department_id = d.department_id
                          ); --결과값이 하나라도 트루면 다 트루임 암튼 그럼                                           

--사원이없는 부서만 출력하시오
SELECT department_id, department_name
FROM departments d
WHERE NOT EXISTS( 
                          SELECT 1
                          FROM employees e
                          WHERE e.department_id = d.department_id
                          )
                                            
SELECT department_id, first_name
FROM employees;

--관리자가 있는 사원의 정보를 출력하시오
SELECT w.employee_id, w.first_name, w.manager_id
FROM employees w
WHERE NOT EXISTS(
                         SELECT 1
                         FROM employees m
                         WHERE w.manager_id = m.employee_id
                         );
                         
--관리자가 없는 사원의 정보를 출력하시오
SELECT w.employee_id, w.first_name, w.manager_id
FROM employees w
WHERE NOT EXISTS(
                         SELECT 1
                         FROM employees m
                         WHERE w.manager_id = m.employee_id
                         );
                         
/*
ROWNUM
1. oracle의 SELECT문 결과에 대해서 논리적인 일련번호를 부여한다.
2. ROWNUM은 조회되는 행수를 제한할 때 많이 사용한다.
3. rownum = 1, rownum <= 3, rownum <3 (가능)
    rownum = 3, rownum >= 3, rownum >3 (불가능)
*/

SELECT rownum, first_name, salary
FROM employees;
                         
SELECT rownum, first_name, salary
FROM employees
WHERE rownum = 1; --o 동등 연산자는 1일 때만 가능

SELECT rownum, first_name, salary
FROM employees
WHERE rownum <= 3; --o

SELECT rownum, first_name, salary
FROM employees
WHERE rownum = 3; --x

SELECT rownum, first_name, salary
FROM employees
WHERE rownum >= 3;--x

SELECT * FROM employees
ORDER BY salary DESC;

SELECT b. *
FROM(SELECT rownum AS rm,  a. * 
FROM(SELECT * FROM employees
           ORDER BY salary DESC) a
           )b
WHERE b.rm >= 6 AND b.rm <= 10;  --WHERE rownum >= 6 AND rownum <= 10 -x
/*rownum은 크거나 같다를 사용하지 못하기 때문에
변수를 지정해서 부등호를 나타낸다.*/

/*
ROWID
1, oracle에서 데이터를 구분할 수 있는 유일한 값ㄴ이다.
2. SELECT문에서 rowid를 사용할 수 있다.
3. rowid를 통해서 데이터가 어떤 데이터 파일, 어느 블록에 저장되어 있는지 알 수 있다.
4. rowid 구조(총 18자리)
오브젝트 번호(1~6) : 오브젝트 별로 유일한 값을 가지고 있으며, 해당 오브젝트가 속해있는 값이다.
파일 번호(7~9) : 테이블스페이스(tablespace)에 속해있는 데이터 파일에대한 상대 파일번호이다.
블록 번호(10~15) : 데이터 파일 내부에서 어느 블록에 데이터가 있는지 알려준다
데이터번호(16~18) : 데이터 블록에

[block size 확인]-8kbyte가 저장됨
SQL> conn sys/z1234 as sysdba
Connected.
SQL> show user
USER is "SYS"
SQL> show parameter db_block_size

NAME                            TYPE             VALUE
----------------- ------------ --------------
db_block_size                integer          8192
----------------- ------------ --------------
*/
SELECT rowid, first_name, salary
FROM employees;













